{"version":3,"file":"static/js/735.e89ebea4.chunk.js","mappings":"0NAGMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,QAgF/B,EAxC2C,SAACC,GAC1C,IAGA,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAiCF,EAAAA,EAAAA,UAASD,EAAMI,SAASF,IAAzD,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA2BL,EAAAA,EAAAA,UAASD,EAAMI,SAASF,GAAKH,QAAxD,eAAOQ,EAAP,KAAaC,EAAb,KACA,GAAgCP,EAAAA,EAAAA,WAAyB,GAAzD,eAAOQ,EAAP,KAAiBC,EAAjB,KAkBA,OA3CkB,SAACC,EAAcC,GACjC,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,YACbJ,GACH,OAAO,kBAAMO,cAAcF,IAE7B,OAAO,eACN,CAACL,IAYJQ,EAAY,WACV,IAAIC,EAASnB,EACToB,EAAUf,EACVA,EAXO,IAWQP,EAAMI,SAASF,GAAKH,SACrCsB,GAAU,EACVC,EAAU,GAERD,IAAWrB,EAAMI,SAASL,OAC5BW,GAAY,IAEZJ,EAAcN,EAAMI,SAASiB,GAAQE,MAAM,EAAGD,IAC9CnB,EAAWkB,GACXb,EAAWc,EAAU,MAEtBb,EArBW,GAqBQ,OAGpB,gBACEe,UAAU,mBACVC,MAAO7B,EAAaS,GAAW,GAAK,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,IAChCkB,aAAc,kBAAO1B,EAAMF,EAAMI,SAASL,QAAWW,GAAY,IAJnE,UAME,eAAGmB,KAAMjC,EAAaS,GAAb,iBAAkCA,EAAlC,cAAwD,GAAjE,WACE,0BAAOA,KACP,+C,UCtDR,EApBmB,kBACjB,SAACyB,EAAA,EAAD,CAAMC,MAAM,UAAUC,YAAY,GAAlC,UACE,qBAASR,UAAU,OAAOP,GAAG,UAA7B,WACE,6BACE,gBAAKO,UAAU,QAAf,UACE,eAAI,cAAY,UAAhB,UAA0B,SAAC,KAAD,CAAMS,GAAG,WAAT,4BAG9B,oBAGA,iBAAKT,UAAU,WAAf,WACE,4HACA,SAAC,EAAD,CAAWpB,SAAU,CAAC,uBAExB,SAAC8B,EAAA,EAAD","sources":["components/Contact/EmailLink.tsx","pages/Contact.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, FC } from 'react';\n\n// Validates the first half of an email address.\nconst validateText = (text: string) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\n// const messages = [\n//   'hi',\n//   'hello',\n//   'hola',\n//   'you-can-email-me-at-literally-anything! Really',\n//   'well, not anything. But most things',\n//   'like-this',\n//   'or-this',\n//   'but not this :(  ',\n//   'you.can.also.email.me.with.specific.topics.like',\n//   'just-saying-hi',\n//   'please-work-for-us',\n//   'help',\n//   'admin',\n//   'or-I-really-like-your-website',\n//   'thanks',\n// ];\n\n\nconst useInterval = (callback:any, delay:number|null) => {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink:FC<{messages: string[]}> = (Props) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(Props.messages[idx]);\n  const [char, updateChar] = useState(Props.messages[idx].length); // points to current char\n  const [isActive, setIsActive] = useState<boolean | null>(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= Props.messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === Props.messages.length) {\n      setIsActive(false);\n    } else {\n      updateMessage(Props.messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < Props.messages.length) && setIsActive(true)}\n    >\n      <a href={validateText(message) ? `mailto:${message}@gmail.com` : ''}>\n        <span>{message}</span>\n        <span>@gmail.com</span>\n      </a>\n    </div>\n  );\n};\n\nexport default EmailLink;\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact:FC = () => (\n  <Main title=\"Contact\" description=\"\" >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\n        </div>\n      </header>\n      <div>\n\n      </div>\n      <div className=\"email-at\">\n        <p>If you have any question or just wanna say hi, Feel free to get in touch. You can email me at: </p>\n        <EmailLink messages={['vickyindiarto']}/>\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["validateText","text","test","length","Props","useState","idx","updateIter","messages","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","href","Main","title","description","to","ContactIcons"],"sourceRoot":""}